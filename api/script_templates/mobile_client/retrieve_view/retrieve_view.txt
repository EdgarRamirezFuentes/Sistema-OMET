import React, { useState, useEffect } from 'react';
import { Text, View, Button, Alert, TouchableOpacity } from 'react-native';
import AlertCmp from '../../Components/Alert/Alert'
import Input from '../../Components/Input/Input';
import Table from '../../Components/Table/DynamicTable';
import Select from '../../Components/Select/Select';
import TimePicker from '../../Components/TimePicker/TimePicker'
import CheckboxGroup from '../../Components/CheckboxGroup/CheckboxGroup'
import * as {{MODEL_NAME_LOWER}}Controller from '../../api/controller/{{APP_NAME}}/{{MODEL_NAME}}'
import SessionManager from '../../api/manager/SessionManager';
const sm = SessionManager.getInstance();
import { ScrollView } from 'react-native-gesture-handler';

function Retrieve{{MODEL_NAME}}({route, navigation}) {
    const { {{MODEL_NAME_LOWER}}_id } = route.params;
    const [error, setError] = useState(null);
    const [alertMessage, setAlertMessage] = useState('');
    const [alertType, setAlertType] = useState('Error');
    const [data, setData] = useState(null);

{{MODEL_HOOKS}}

{{FOREIGN_KEY_HOOKS}}

{{FOREIGN_KEY_SELECTED_ITEMS}}

{{FOREIGN_KEY_FLAGS}}

    {{FOREIGN_KEY_GET_DATA_FUNCTIONS}}

    {{FOREIGN_KEY_USE_EFFECTS}}

    const get{{MODEL_NAME_TITLE}} = async () => {
        const token = await sm.getTokenSession();
        if (data == null) {
            await {{MODEL_NAME_LOWER}}Controller.retrieve{{MODEL_NAME}}({{MODEL_NAME_LOWER}}_id, token).then(async (response) => {
                console.log(response)
                if (response.status === 200) {
                    let res = await response.json()
                    setData(res)
{{FIELD_SETTERS}}
                } else {
                    setError(response.data.message)
                    setAlertMessage(response.data.message)
                }
            }).catch((error) => {
                console.log(error)
                setError(error)
                setAlertMessage(error)
            })
        }

    }

    useEffect(() => {
        get{{MODEL_NAME_TITLE}}();
    },[data,])

    const onCloseHandler = () => {
        setError(null)
        setAlertType('Error');
        setAlertMessage('')
    }
    const transformData = (data) => {

        data = data.map((item) => {
            return item.id
        })
        return data
    }

    return (
        <View className="w-full h-full bg-slate-100">
            <View className='flex flex-row h-full'>
                <View className='w-full'>
                    <View className='mt-3 ml-5 flex justify-center'>
                        <Text className='text-3xl font-bold'>Visualizar {{MODEL_NAME}}</Text>
                    </View>
                    <ScrollView className='flex flex-col'>
                        <View className='mt-5 p-5 flex flex-col items-center m-auto w-full rounded-2xl bg-white'>

                            <View className="w-full overflow-hidden">
                                <AlertCmp type={alertType} show={error != null} title={alertMessage} onClose={onCloseHandler} />
                            </View>

                            <View className='mt-5 w-full items-center flex flex-row'>

                                <View className='w-full flex flex-col items-center'>

                                    <View className='w-full flex flex-col justify-between'>
{{INPUT_FIELDS}}
                                    </View>

                                </View>
                            </View>
                        </View>
                    </ScrollView>
                </View>
            </View>
        </View>
    )
}

export default Retrieve{{MODEL_NAME}}
