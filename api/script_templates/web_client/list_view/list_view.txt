import '../../App.css'
import Timer from '../../Components/Timer/Timer'
import SideBar from '../../Components/Sidebar/Sidebar'
import React, { useState, useEffect } from 'react';
import Alert from '../../Components/Alert/Alert'
import { useNavigate } from 'react-router-dom';
import Table from '../../Components/tailwindUI/Table'
import { TrashIcon, ClipboardIcon, EyeIcon, CircleStackIcon, XMarkIcon } from '@heroicons/react/24/outline';
import Modal from '../../Components/tailwindUI/Modal';
import ModalDelete from '../../Components/ModalDelete/ModalDelete';
import { get{{MODEL_NAME}}, delete{{MODEL_NAME}} } from '../../api/controller/{{APP_NAME}}/{{MODEL_NAME}}';
import Create{{MODEL_NAME}} from './{{MODEL_NAME}}CreateView.jsx';
import Update{{MODEL_NAME}} from './{{MODEL_NAME}}UpdateView.jsx';
import Retrieve{{MODEL_NAME}} from './{{MODEL_NAME}}RetrieveView.jsx';

function {{MODEL_NAME}}List() {
    const history = useNavigate();

    const session = JSON.parse(localStorage.getItem('session'));
    const [error, setError] = useState(null);
    const [alertMessage, setAlertMessage] = useState('');
    const [alertType, setAlertType] = useState('Error');
    const [isLoadingData, setIsLoadingData] = useState(true)
    const [allData, setAllData] = useState([])

    const [selectedItem, setSelectedItem] = useState(null);

    //Modales
    const [openModalView, setOpenModalView] = useState(false);
    const [openModalDelete, setOpenModalDelete] = useState(false);
    const [openModalUpdate, setOpenModalUpdate] = useState(false);
    const [openModalCreate, setOpenModalCreate] = useState(false);
    const [flag ,setFlag] = useState(false);

    const tableColumns = [
      { heading: 'Id', value: 'id',align: 'center' },
      { heading: {{FIRST_VALUE_CAPITALIZE}}, value: {{FIRST_VALUE}}, main: true},
    ];

    useEffect(() => {
        if (!flag) {
            get{{MODEL_NAME}}(session.token).then(async (response) => {
                console.log(response)
                if (response.status === 200) {
                    let res = await response.json()
                    setAllData(res)
                    console.log(res)
                    setIsLoadingData(false)
                    setFlag(true)
                } else {
                    setError(response.data.message)
                    setAlertMessage(response.data.message)
                    setIsLoadingData(false)
                }
            }).catch((error) => {
                console.log(error)
                setError(error)
                setAlertMessage(error)
                setIsLoadingData(false)
            })
        }

    },[allData, flag])

    const handleView = item => {
        setOpenModalView(true)
        setSelectedItem(item)
    }

    const handleUpdate = item => {
        setOpenModalUpdate(true)
        setSelectedItem(item)
    }

    const handleDelete = async (item) => {
        setOpenModalDelete(true)
        setSelectedItem(item)
    }

    const columnActions = [
        {
            id: 1,
            name: 'Ver',
            type: 'primary',
            icon: <EyeIcon className='w-5 h-5 text-gray-600 lg:text-white'/>,
            action: handleView,
        },
        {
            id: 2,
            name: 'Actualizar',
            type: 'primary',
            icon: <ClipboardIcon className='w-5 h-5 text-gray-600 lg:text-white'/>,
            action: handleUpdate,
        },
        {
            id: 4,
            name: 'Eliminar',
            type: 'primary',
            icon: <TrashIcon className='w-5 h-5 text-gray-600 lg:text-white'/>,
            action: handleDelete,
        }
      ];

    const onCloseHandler = () => {
        setError(null)
        setAlertType('Error');
        setAlertMessage('')
    }

    const handlerCreate = () => {
        setOpenModalCreate(true)
    }

    const getData = async () => {
        if (allData.length == 0){
            setAllData([{"id":1,"name":"Daniel"}])
        }
    }

    const handleDeleteModel = async () => {
        await delete{{MODEL_NAME}}(selectedItem.id, session.token).then((response)=>{

            if(response.status === 204){
                setAlertType('Success');
                setAlertMessage('Eliminado correctamente.')
                setError(true);
                setFlag(false);
                setOpenModalDelete(false);
            }
        })
  }


    return (
        <div className="w-full h-full bg-slate-100">
            <div className='flex flex-row h-screen'>
            <SideBar/>
                <div className='w-full'>
                <div className='w-full p-5 flex flex-row justify-between items-center bg-white'>
                    <div className='w-full mr-5'>
                        <Timer/>
                    </div>
                </div>
                <div>
                    <div className='mt-3 ml-5 mr-5 flex flex-row justify-between items-center '>
                        <p className='text-3xl font-bold'>Lista de {{MODEL_NAME}}</p>
                        <button onClick={handlerCreate} className="rounded-full text-white bg-zinc-400 hover:bg-cyan-400">Crear {{MODEL_NAME}}</button>
                    </div>
                    <div className="mt-5 w-full overflow-hidden">
                        <Alert type={alertType} show={error != null} title={alertMessage} onClose={onCloseHandler} />
                    </div>
                    <div className='mt-5'>
                        <Table title='InformaciÃ³n' data={ allData } isLoadingData={ isLoadingData } columns={ tableColumns } actions={ columnActions }/>
                    </div>
                </div>
                </div>
            </div>
            <Modal show={ openModalCreate } setShow={ setOpenModalCreate } className='min-w-full sm:min-w-[1200px]'>
                <div className='w-full text-gray-400 flex justify-end'><XMarkIcon className='w-7 h-7 cursor-pointer' onClick={ () => setOpenModalCreate(false) }/></div>
                <Create{{MODEL_NAME}} onCreated={() => {setOpenModalCreate(false); setFlag(false);}}/>
            </Modal>
            <Modal show={ openModalView } setShow={ setOpenModalView } className='min-w-full sm:min-w-[1200px]'>
                <div className='w-full text-gray-400 flex justify-end'><XMarkIcon className='w-7 h-7 cursor-pointer' onClick={ () => setOpenModalView(false) }/></div>
                <Retrieve{{MODEL_NAME}} {{MODEL_NAME_LOWER}}_id={selectedItem?.id} />
            </Modal>
            <Modal show={ openModalUpdate } setShow={ setOpenModalUpdate } className='min-w-full sm:min-w-[1200px]'>
                <div className='w-full text-gray-400 flex justify-end'><XMarkIcon className='w-7 h-7 cursor-pointer' onClick={ () => setOpenModalUpdate(false) }/></div>
                <Update{{MODEL_NAME}} onUpdated={() => {setOpenModalUpdate(false); setFlag(false); }} {{MODEL_NAME_LOWER}}_id={selectedItem?.id} />
            </Modal>
            <Modal show={ openModalDelete } setShow={ setOpenModalDelete } className='min-w-full sm:min-w-[1200px]'>
                <div className='w-full text-gray-400 flex justify-end'><XMarkIcon className='w-7 h-7 cursor-pointer' onClick={ () => setOpenModalDelete(false) }/></div>
                <ModalDelete onDelete={handleDeleteModel}/>
            </Modal>
        </div>
    )
}

export default {{MODEL_NAME}}List
