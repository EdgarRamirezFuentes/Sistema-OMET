import '../../App.css'
import React, { useState, useEffect } from 'react';
import Alert from '../../Components/Alert/Alert'
import { useNavigate, useLocation } from 'react-router-dom';
import * as {{MODEL_NAME_LOWER}}Controller from '../../api/controller/{{APP_NAME}}/{{MODEL_NAME}}'
import PropTypes from 'prop-types';
import Input from '../../Components/tailwindUI/Input'
import Select from '../../Components/tailwindUI/Select'
import TextArea from '../../Components/tailwindUI/TextArea'

function Create{{MODEL_NAME}}({onCreated}) {
    const history = useNavigate();
    const location = useLocation();
    const session = JSON.parse(localStorage.getItem('session'));
    const [error, setError] = useState(null);
    const [alertMessage, setAlertMessage] = useState('');
    const [alertType, setAlertType] = useState('Error');

{{MODEL_HOOKS}}

{{FOREIGN_KEY_HOOKS}}

{{FOREIGN_KEY_FLAGS}}

{{FOREIGN_KEY_GET_DATA_FUNCTIONS}}

{{FOREIGN_KEY_USE_EFFECTS}}


    const onCloseHandler = () => {
        setError(null)
        setAlertType('Error');
        setAlertMessage('')
    }

    const buttonHandler = async () => {
{{NOT_NULL_VALIDATIONS}}

        let request = {
{{REQUEST_FIELDS}}
        }

        await {{MODEL_NAME_LOWER}}Controller.create{{MODEL_NAME}}(request, session.token).then(async (response)=>{
            if (response.status === 201){
                setAlertType('Success');
                setAlertMessage('Creado correctamente.')
                setError(true);
                setTimeout((e) => onCreated && onCreated(true),1000);
            } else if(response.status == 400) {
                setAlertType('Warning');
                setAlertMessage('La informaci√≥n enviada no cumple el formato requerido.')
                setError(true);
            } else{
                setAlertType('Error');
                setAlertMessage('Error al crear.')
                setError(true);
            }
        });
    }

    return (
        <div className="w-full h-full bg-slate-100">
            <div className='flex flex-row h-full'>
                <div className='w-full'>
                    <div className='mt-3 ml-5 flex justify-center'>
                        <p className='text-3xl font-bold'>Crear {{MODEL_NAME}}</p>
                    </div>
                    <div className='flex flex-col justify-between'>
                        <div className='mt-5 p-5 flex flex-col items-center m-auto w-1/2 rounded-2xl bg-white'>

                            <div className="w-full overflow-hidden">
                                <Alert type={alertType} show={error != null} title={alertMessage} onClose={onCloseHandler} />
                            </div>

                            <div className='mt-5 w-full items-center flex flex-row'>

                                <div className='w-full flex flex-col items-center'>

                                    <div className='w-full flex flex-col justify-between'>
{{INPUT_FIELDS}}
                                    </div>

                                </div>
                            </div>
                            <div className='w-1/4'>
                                <input onClick={buttonHandler} className=' text-white w-full py-2 px-4 rounded-full bg-zinc-400 mx-auto hover:bg-cyan-400 hover:cursor-pointer' type="submit" value="Crear"/><br/><br/>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    )
}

Create{{MODEL_NAME}}.propTypes = {
    onCreated : PropTypes.func
}

export default Create{{MODEL_NAME}}
